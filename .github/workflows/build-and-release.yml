name: Build and Release

on:
  push:
    tags:
      - 'v*' # Trigger on version tags like v1.0.0
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: write # Required for creating releases

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # Build for Intel Macs
            target: 'x86_64-apple-darwin'
            args: '--target x86_64-apple-darwin'
          - platform: 'macos-latest' # Build for Apple Silicon Macs (M1/M2/M3)
            target: 'aarch64-apple-darwin'
            args: '--target aarch64-apple-darwin'
          - platform: 'ubuntu-20.04' # Linux x86_64
            target: 'x86_64-unknown-linux-gnu'
            args: ''
          - platform: 'windows-latest' # Windows x86_64
            target: 'x86_64-pc-windows-msvc'
            args: ''

    runs-on: ${{ matrix.platform }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libxdo-dev \
            libsoup-3.0-dev \
            libjavascriptcoregtk-4.1-dev

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install frontend dependencies
        run: bun install

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: 'Claudia ${{ github.ref_name }}'
          releaseBody: |
            See the assets to download the installer for your platform.
            
            ## Installation
            
            ### Windows
            - Download the `.msi` installer for a system-wide installation
            - Download the `.exe` installer for a portable installation
            
            ### macOS
            - Download the `.dmg` file matching your Mac:
              - `*-x86_64.dmg` for Intel Macs
              - `*-aarch64.dmg` for Apple Silicon Macs (M1/M2/M3)
            
            ### Linux
            - Download the `.deb` package for Debian/Ubuntu-based distributions
            - Download the `.AppImage` for a portable application that runs on most Linux distributions
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}

  # Additional job to create the release only once
  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Create Release Notes
        id: release_notes
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Generate release notes from recent commits
          echo "## What's Changed" > release_notes.md
          echo "" >> release_notes.md
          
          # Get commit messages since last tag
          git log $(git describe --tags --abbrev=0 HEAD^)..HEAD --pretty=format:"- %s" >> release_notes.md || echo "- Initial release" >> release_notes.md
          
          echo "" >> release_notes.md
          echo "" >> release_notes.md
          echo "## Installation" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Windows" >> release_notes.md
          echo "- Download the \`.msi\` installer for a system-wide installation" >> release_notes.md
          echo "- Download the \`.exe\` installer for a portable installation" >> release_notes.md
          echo "" >> release_notes.md
          echo "### macOS" >> release_notes.md
          echo "- Download the \`.dmg\` file matching your Mac:" >> release_notes.md
          echo "  - \`*-x86_64.dmg\` for Intel Macs" >> release_notes.md
          echo "  - \`*-aarch64.dmg\` for Apple Silicon Macs (M1/M2/M3)" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Linux" >> release_notes.md
          echo "- Download the \`.deb\` package for Debian/Ubuntu-based distributions" >> release_notes.md
          echo "- Download the \`.AppImage\` for a portable application that runs on most Linux distributions" >> release_notes.md
          echo "" >> release_notes.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$(git describe --tags --abbrev=0 HEAD^)...$VERSION" >> release_notes.md || echo "**Full Changelog**: https://github.com/${{ github.repository }}/commits/$VERSION" >> release_notes.md

      - name: Publish Release
        uses: softprops/action-gh-release@v1
        with:
          body_path: release_notes.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}